//ver.6.xでインストール
composer create-project "laravel/laravel=6.*" LaraShop

//laravel/ui インストール
composer require laravel/ui "^1.2"

//認証機能
php artisan ui vue --auth

//npmインストール
npm install

//実行
npm run dev

//諸々設定
myadminでlarashopのDBファイルを作る
・config/app.php
timezone => 'Asia/Toyko'
local => 'ja'
fallback_local => 'ja_JP'
faker_local => 'ja_JP'
・.env
DB_DATABASE=larashop
DB_USERNAME=root
DB_PASSWORD=

//DBの設計と構築
・マイグレーションファイルの生成
php artisan make:migration create_stocks_table
php artisan make:migration create_carts_table
カラムの生成
php artisan migrate
・シーダーファイルの生成
php artisan make:seed StockTableSeeder
php artisan make:seed CartTableSeeder
databaseSeederにstockの記述をする
シーダー機能はオートロードを使用するのでコマンドで実行
composer dump-autoload
シーダーの実行
php artisan db:seed

//ルーティング

//コントローラーの作成
php artisan make:controller ShopController

//viewの作成

//Modelの作成
php artisan make:model Models/Stock
php artisan make:model Models/Cart
$gurdedか$fillableの記述をする

//controllerにモデル操作の記述をする
DBから情報を取得する
情報をviewに受け渡す
viewで受け取って表示する(viewの作業)

//カート機能を作る
①商品一覧ページの各商品ごとに「カートに追加」ボタンを作るview
②カートに追加ボタンからPOST送信で/mycartにアクセスされた場合のルートを作成する。route
③Cartsテーブルにログイン状態のユーザーのIDと商品のIDを格納する。controller
今回は在庫が1つしかない設定ですのでこのようにしていますが、
カートに同じ種類のものを複数入れて行きたいのであれば、
else内でカート内数を＋１させる処理をしてその情報をデータベースに持たせるなどしても良さそうですね。
同時にstocksテーブルにも在庫状態を…ってなってくるのでこの記事では触れないおきます。実践でやってみてください！
④Cartsテーブルから情報を取得して表示する。controller->view

//style
resources/sass/_styleを作る
app.sccsにimportする
_styleに書き込む

//sccsをコンパイルする

//headerのレイアウト
.env  APP_NAMEを変更する

//mycart.blade
$messageがあるときないとき{{ $message ?? '' }}

//controllerのDB操作をCartModelに書く
モデルに書いてコントローラーをすっきりさせる

//削除機能の実装
ビューにボタン追加
ルーティング
モデルとコントローラーにメソッド追加

//カート内合計金額
モデルでカート内情報を取得するタイミングで取得
コントローラーで受け取る
ビューで表示

//購入機能
①購入するボタンを押すと購入完了画面に遷移する
ルーティング
②カートテーブルから該当の商品を削除する
modelで削除したカート情報を取得しておく
③Mailの送信内容を記入する
mailtrapの設定を.envに反映させる
メールフォルダを作る
php artisan make:mail Thanks --markdown="mails.thanks"
app/Mails/Thanks.phpとresouces/views/mails/thanks.blade.phpができる
④Mailhogで擬似のメールを送信する。
コントローラーのチェックアウトメソッドに追加する
mails/thanks.blade.phpで送信内容を編集
Mail/Thanks.phpの編集